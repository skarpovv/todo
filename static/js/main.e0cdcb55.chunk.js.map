{"version":3,"sources":["redux/home-reducer.ts","components/Header/Header.tsx","components/Todos/Todo.tsx","components/Todos/Todos.tsx","components/Main/Main.tsx","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initState","todos","localStorage","JSON","parse","inputText","inputState","filter","editText","onTextChange","text","type","onEditTextChange","homeReducer","state","arguments","length","undefined","action","Object","objectSpread","stringify","concat","toConsumableArray","id","isComplete","isEdit","map","el","value","Header","useSelector","home","dispatch","useDispatch","react_default","a","createElement","Box","sx","flexGrow","AppBar","position","backgroundColor","Toolbar","IconButton","size","edge","color","aria-label","mr","Menu_default","Typography","variant","component","minWidth","ToggleButtonGroup","transition","& button","outlineColor","border","& button:focus","& button:active","exclusive","onChange","event","setFilter","ToggleButton","Item","styled","Paper","_ref","theme","palette","mode","typography","h5","padding","spacing","textAlign","secondary","Todo","props","TodoTextStyle","textDecoration","TodoStyled","TextField","e","target","label","width","borderColor","Button","disabled","onClick","Check","Clear","Edit","Delete","StyledTodos","maxWidth","margin","Todos","filterTodos","JSXtodos","useMemo","Todos_Todo","key","Stack","MainStyle","height","marginTop","InputStyle","display","justifyContent","Main","console","log","error","&:hover","setTimeout","addTodo","components_Todos_Todos","reducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","App","Fragment","es","components_Header_Header","components_Main_Main","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.e0cdcb55.chunk.js","sourcesContent":["export type TodoType = {\r\n    id: string,\r\n    isEdit: boolean,\r\n    isComplete: boolean,\r\n    text: string,\r\n}\r\nexport type InitStateType = {\r\n    todos: Array<TodoType>,\r\n    inputText: string,\r\n    inputState: boolean,\r\n    filter: \"all\" | \"current\" | \"completed\",\r\n    editText: string,\r\n}\r\n\r\ntype OnTextChangeActionType = {\r\n    type: typeof TEXT_CHANGE,\r\n    text: string\r\n}\r\ntype OnAddTodoActionType = {\r\n    type: typeof ADD_TODO,\r\n}\r\ntype OnToggleInputStateActionType = {\r\n    type: typeof TOGGLE_INPUT_STATE,\r\n}\r\ntype OnToggleTodoCompleteActionType = {\r\n    type: typeof TOGGLE_TODO_COMPLETE,\r\n    id: string,\r\n}\r\ntype DeleteTodoActionType = {\r\n    type: typeof DELETE_TODO,\r\n    id: string,\r\n}\r\ntype SetFilterActionType = {\r\n    type: typeof SET_FILTER,\r\n    value: string,\r\n}\r\ntype OnEditTextActionType = {\r\n    type: typeof EDIT_TEXT_CHANGE,\r\n    text: string,\r\n}\r\ntype OnEditTodoActionType = {\r\n    type: typeof EDIT_TODO,\r\n    id: string,\r\n}\r\ntype OnSetEditActionType = {\r\n    type: typeof SET_EDIT,\r\n    id: string,\r\n}\r\ntype CancelEditActionType = {\r\n    type: typeof CANCEL_EDIT,\r\n}\r\n\r\nconst TEXT_CHANGE = \"TEXT_CHANGE\";\r\nconst ADD_TODO = \"ADD_TODO\";\r\nconst TOGGLE_INPUT_STATE = \"TOGGLE_INPUT_STATE\";\r\nconst TOGGLE_TODO_COMPLETE = \"TOGGLE_TODO_COMPLETE\";\r\nconst DELETE_TODO = \"DELETE_TODO\";\r\nconst SET_FILTER = \"SET_FILTER\";\r\nconst EDIT_TEXT_CHANGE = \"EDIT_TEXT_CHANGE\";\r\nconst EDIT_TODO = \"EDIT_TODO\";\r\nconst SET_EDIT = \"SET_EDIT\";\r\nconst CANCEL_EDIT = \"CANCEL_EDIT\";\r\n\r\n\r\nlet initState: InitStateType = {\r\n    todos: (localStorage[\"redux-store\"]) ? JSON.parse(localStorage[\"redux-store\"]) : [],\r\n    inputText: \"\",\r\n    inputState: false,\r\n    filter: \"all\",\r\n    editText: \"\",\r\n};\r\n\r\nlet homeReducer = (state = initState, action: any):InitStateType => {\r\n    switch (action.type){\r\n        case TEXT_CHANGE:{\r\n            return {\r\n                ...state,\r\n                inputText: action.text\r\n            }\r\n        }\r\n        case ADD_TODO:{\r\n            localStorage[\"redux-store\"] = JSON.stringify([...state.todos, {id: state.todos.length + state.inputText, isComplete: false, text: state.inputText, isEdit: false}])\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, {id: state.todos.length + state.inputText, isComplete: false, text: state.inputText, isEdit: false}]\r\n            }\r\n        }\r\n        case TOGGLE_INPUT_STATE:{\r\n            return {\r\n                ...state,\r\n                inputState: !state.inputState,\r\n            }\r\n        }\r\n        case TOGGLE_TODO_COMPLETE:{\r\n            localStorage[\"redux-store\"] = JSON.stringify(state.todos.map((el) => {\r\n                if (action.id === el.id) return {\r\n                    ...el,\r\n                    isComplete: !el.isComplete,\r\n                }\r\n                return el;\r\n            }));\r\n            return{\r\n                ...state,\r\n                todos: state.todos.map((el) => {\r\n                    if (action.id === el.id) return {\r\n                        ...el,\r\n                        isComplete: !el.isComplete,\r\n                    }\r\n                    return el;\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TODO:{\r\n            localStorage[\"redux-store\"] = JSON.stringify(state.todos.filter((el) => action.id != el.id))\r\n            return{\r\n                ...state,\r\n                todos: state.todos.filter((el) => action.id != el.id),\r\n            }\r\n        }\r\n        case SET_FILTER:{\r\n            return {\r\n                ...state,\r\n                filter: action.value,\r\n            }\r\n        }\r\n        case EDIT_TEXT_CHANGE:{\r\n            return{\r\n                ...state,\r\n                editText: action.text,\r\n            }\r\n        }\r\n        case EDIT_TODO:{\r\n            localStorage[\"redux-store\"] = JSON.stringify(state.todos.map((el) => {\r\n                if (el.id === action.id) return {...el, text: state.editText, isEdit: false}\r\n                return el;\r\n            }))\r\n            return{\r\n                ...state,\r\n                todos: state.todos.map((el) => {\r\n                    if (el.id === action.id) return {...el, text: state.editText, isEdit: false}\r\n                    return el;\r\n                })\r\n            }\r\n        }\r\n        case SET_EDIT:{\r\n            return{\r\n                ...state,\r\n                todos: state.todos.map((el) => {\r\n                    if (el.id == action.id) return {...el, isEdit: !el.isEdit}\r\n                    return {...el, isEdit: false};\r\n                })\r\n            }\r\n        }\r\n        case CANCEL_EDIT:{\r\n            return{\r\n                ...state,\r\n                todos: state.todos.map((el) => ({...el, isEdit: false})),\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const onTextChange = (text: string): OnTextChangeActionType => ({type: TEXT_CHANGE, text});\r\nexport const onAddTodo = ():OnAddTodoActionType => ({type: ADD_TODO});\r\nexport const toggleInputState = (): OnToggleInputStateActionType => ({type: TOGGLE_INPUT_STATE});\r\nexport const toggleTodoComplete = (id: string): OnToggleTodoCompleteActionType => ({type: TOGGLE_TODO_COMPLETE, id});\r\nexport const deleteTodo = (id: string): DeleteTodoActionType => ({type: DELETE_TODO, id});\r\nexport const setFilter = (value: \"all\" | \"current\" | \"completed\"): SetFilterActionType => ({type: SET_FILTER, value});\r\nexport const onEditTextChange = (text: string): OnEditTextActionType => ({type: EDIT_TEXT_CHANGE, text});\r\nexport const editTodo = (id: string):OnEditTodoActionType => ({type: EDIT_TODO, id});\r\nexport const setEdit = (id: string):OnSetEditActionType => ({type: SET_EDIT, id});\r\nexport const cancelEdit = ():CancelEditActionType => ({type: CANCEL_EDIT});\r\n\r\nexport default homeReducer;","import React from 'react';\r\nimport {Box, AppBar, IconButton, Toolbar, Typography, ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setFilter} from \"../../redux/home-reducer\";\r\n\r\nconst Header = () => {\r\n    let filter = useSelector((state:any):string => state.home.filter);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Box sx={{ flexGrow: 1}}>\r\n            <AppBar position=\"static\" sx={{backgroundColor: \"#32b87b\"}}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color={\"inherit\"}\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, minWidth: \"70px\", }}>\r\n                        TO DO\r\n                    </Typography>\r\n                    <ToggleButtonGroup\r\n                        sx={{ flexGrow: 1, color: \"white\", transition: \"all ease 0.6s\", \"& button\":{\r\n                            color: \"white\",\r\n                                outlineColor: \"white\", border: \"1px dotted #fff\",\r\n                            }, \"& button:focus\": {color: \"#000\"}, \"& button:active\": {color: \"#000\"} }}\r\n                        color=\"primary\"\r\n                        value={filter}\r\n                        exclusive\r\n                        onChange={(event, value)=>{ value && dispatch(setFilter(value))}}\r\n                    >\r\n                        <ToggleButton value=\"all\">All</ToggleButton>\r\n                        <ToggleButton value=\"current\">Current TO DO</ToggleButton>\r\n                        <ToggleButton value=\"completed\">Completed</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Box, Button, Paper, styled, TextField} from \"@mui/material\";\r\nimport {Check, Edit, Delete, Clear} from \"@mui/icons-material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    deleteTodo,\r\n    editTodo,\r\n    onEditTextChange,\r\n    setEdit,\r\n    toggleTodoComplete,\r\n    cancelEdit\r\n} from \"../../redux/home-reducer\";\r\n\r\ntype TodoPropsType = {\r\n    id: string,\r\n    key: string,\r\n    text: string,\r\n    isComplete: boolean,\r\n    isEdit: boolean,\r\n}\r\n\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n    ...theme.typography.h5,\r\n    padding: theme.spacing(2),\r\n    textAlign: 'start',\r\n    color: theme.palette.text.secondary,\r\n}));\r\n\r\nconst Todo = (props: TodoPropsType) => {\r\n    let TodoTextStyle = {\r\n        textDecoration: (props.isComplete) ? \"line-through\" : \"none\",\r\n        transition: \"all ease 0.6s\",\r\n    }\r\n    let TodoStyled = {\r\n        backgroundColor: (props.isComplete) ? \"#ccc\" : \"#fff\",\r\n        color: (props.isComplete) ? \"#900\" : \"black\",\r\n        transition: \"all ease 0.6s\",\r\n    }\r\n    let editText = useSelector((state:any):string => state.home.editText);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        (!props.isEdit) ?\r\n        <Item sx={TodoStyled}>\r\n            <Box sx={TodoTextStyle}>\r\n                {props.text}\r\n            </Box>\r\n            <Button onClick = {() => {dispatch(toggleTodoComplete(props.id))}}>\r\n                {(props.isComplete) ? <Clear color={\"error\"}/> : <Check/>}\r\n            </Button>\r\n            <Button disabled={props.isComplete} onClick={() => {\r\n                dispatch(setEdit(props.id));\r\n                dispatch(onEditTextChange(props.text));\r\n            }}>\r\n                <Edit color={(props.isComplete) ? \"error\" : \"primary\"}/>\r\n            </Button>\r\n            <Button onClick = {() => {dispatch(deleteTodo(props.id))}}>\r\n                <Delete color={(props.isComplete) ? \"error\" : \"primary\"}/>\r\n            </Button>\r\n        </Item>\r\n        :\r\n        <Item>\r\n            <TextField id=\"outlined-basic\"\r\n                       onChange={(e)=>{dispatch(onEditTextChange(e.target.value))}}\r\n                       label=\"To do ...\"\r\n                       variant=\"outlined\"\r\n                       sx={{width: \"100%\", outlineColor: \"#32b87b\", borderColor: \"#32b87b\"}}\r\n                       value={editText}\r\n            />\r\n            <Button disabled={!editText} onClick={() => {dispatch(editTodo(props.id)); dispatch(cancelEdit())}}>\r\n                <Check/>\r\n            </Button>\r\n            <Button onClick = {() => {dispatch(cancelEdit())}}>\r\n                <Clear color=\"error\"/>\r\n            </Button>\r\n        </Item>\r\n\r\n    );\r\n};\r\n\r\nexport default Todo;","import React, {useMemo} from 'react';\r\nimport {Box, Stack} from \"@mui/material\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {TodoType} from \"../../redux/home-reducer\";\r\nimport Todo from \"./Todo\";\r\n\r\nlet StyledTodos: object = {\r\n    maxWidth: \"512px\",\r\n    margin: \"0 auto\",\r\n    border: \"10px solid #fff\",\r\n    transition: \"all ease 0.6s\"\r\n}\r\n\r\nlet filterTodos = (todos: Array<TodoType>, filter: \"all\" | \"current\" | \"completed\"):Array<TodoType> => {\r\n    if (filter === \"all\") return todos;\r\n    if (filter === \"current\") return todos.filter((el) => el.isComplete === false);\r\n    if (filter === \"completed\") return todos.filter((el) => el.isComplete === true);\r\n}\r\n\r\nconst Todos = () => {\r\n    let filter = useSelector((state:any):\"all\" | \"current\" | \"completed\" => state.home.filter);\r\n    let todos:Array<TodoType> = filterTodos(useSelector((state:any):Array<TodoType> => state.home.todos), filter);\r\n    let JSXtodos: Array<JSX.Element> = useMemo(() => todos.map((el:TodoType) => {\r\n        return <Todo isEdit={el.isEdit} key={el.id} id={el.id} text = {el.text} isComplete = {el.isComplete}/>\r\n    }),[todos]);\r\n\r\n    return (\r\n        <Box sx={StyledTodos}>\r\n            <div>\r\n                <Stack spacing={2}>\r\n                    {JSXtodos}\r\n                </Stack>\r\n            </div>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Todos;","import React from 'react';\r\nimport {Box, Button, TextField} from '@mui/material';\r\nimport Todos from \"../Todos/Todos\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {onAddTodo, onTextChange, toggleInputState} from \"../../redux/home-reducer\";\r\n\r\nlet MainStyle: object = {\r\n    margin: \"0 auto\",\r\n    maxWidth: \"759px\",\r\n    height: \"100%\",\r\n    backgroundColor: \"white\",\r\n    textAlign: \"center\",\r\n    marginTop: \"20px\",\r\n    transition: \"all ease 0.6s\"\r\n}\r\nlet InputStyle = {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n}\r\n\r\nconst Main = () => {\r\n\r\n    let dispatch = useDispatch();\r\n    let changeText = (text:string) => {\r\n        dispatch(onTextChange(text));\r\n    }\r\n    let addTodo = (inputText: string) => {\r\n        if (inputText) {\r\n            dispatch(onAddTodo());\r\n            dispatch(onTextChange(\"\"));\r\n        }\r\n        else{\r\n            dispatch(toggleInputState());\r\n            setTimeout(()=> {dispatch(toggleInputState())},700);\r\n        }\r\n    }\r\n    let inputText = useSelector((state:any):string => state.home.inputText);\r\n    let inputState = useSelector((state:any):boolean => state.home.inputState);\r\n    console.log(inputText);\r\n    return (\r\n        <Box sx={MainStyle} >\r\n            <Box sx={InputStyle}>\r\n            <TextField id=\"outlined-basic\"\r\n                       error = {inputState}\r\n                       value={inputText}\r\n                       onChange={(e)=>{changeText(e.target.value)}}\r\n                       label={(inputState) ? \"Enter to do text\" : \"To do ...\"}\r\n                       variant=\"outlined\"\r\n\r\n                       sx={{width: \"70%\", outlineColor: \"#32b87b\", borderColor: \"#32b87b\"}}\r\n                       />\r\n            <Button\r\n                sx={{backgroundColor: \"#32b87b\", '&:hover':{backgroundColor: \"#43c98c\"}}}\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                    addTodo(inputText);\r\n                } }>Add Todo</Button>\r\n            </Box>\r\n            <Todos/>\r\n        </Box>\r\n\r\n    );\r\n};\r\n\r\nexport default Main;","import {applyMiddleware, createStore} from \"redux\";\r\nimport {combineReducers} from \"redux\";\r\nimport homeReducer from \"./home-reducer\";\r\nimport {composeWithDevTools} from \"@redux-devtools/extension\";\r\n\r\nlet reducers = combineReducers({\r\n    home: homeReducer,\r\n})\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    composeWithDevTools(\r\n        applyMiddleware()\r\n    )\r\n);\r\n\r\n//store.subscribe(()=> {\r\n  //  localStorage[\"redux-store\"] = JSON.stringify(store.getState().home);\r\n//})\r\n\r\nexport default store;\r\n\r\n\r\n","import React from \"react\";\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nconst App = () => {\n    return (\n        <>\n            <Provider store={store}>\n                <Header/>\n                <Main/>\n            </Provider>\n        </>\n    )\n}\n\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}